# -*- coding: utf-8 -*-
"""Planck Optimize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kTCC5yrElrAh8zzFsWGWqkcCOmItaSxG

# Planck Optimize
"""
import os
import sys
import glob
import shutil
import warnings
import astropy.io.fits
##to fitting
from scipy.optimize import curve_fit
import numpy as np
import scipy.constants as sc
## to draw
import matplotlib.pyplot as plt
## to excel
import pandas as pd
import openpyxl as excel

def planck(x,T,A):
  x = sc.c/(10**(x-6))
  return A+5*np.log10(x)+np.log10(2)+np.log10(sc.h)-2*np.log10(sc.c)-np.log10(np.exp(sc.h*x/(sc.k*T)))+20

def ConvUnit(naxis):
  return 1/(((10/naxis)**2)/3600*((2*np.pi)/360)**2)*1e-6


warnings.simplefilter('ignore')

temp_initial = 6
bairitu_initial = -30
temp_mintoMax = [5.8,100]
bairitu_mintoMax = [-50,10]

objli = input("ファイル名(複数ある場合は\",\"で区切る) : ").split(",")
path = os.path.dirname(os.path.abspath(__file__))+"/"
for obj in objli:
    inname = []
    for f in glob.glob(path+obj+"/*.fits"):
      print("Load :",f)
      inname.append(f)
    
    if inname == []:
      print("\""+path+"\"内に目的のファイルがありません")
      sys.exit()
    
    s = "Y" # input("これらのファイルでよろしいですか？(Y/N) : ").upper()
    if s != "Y":
      print("最初からやり直してください")
      sys.exit()
    
    
    try:
      shutil.rmtree(path+"Fit_"+obj)
    except :
        pass
    os.mkdir(path+"Fit_"+obj)
    
    
    li, li_v, obs_a, obs, wavelist = [],[],[],[],[]
    a = 0
    b = len(inname)
    v1= 0
    v2 = 1e+8
    while a < b:
        hdulist = astropy.io.fits.open(inname[a])
        hdu = hdulist[0]
        data = hdu.data
    
        fits = astropy.io.fits.open(inname[a])
        wavelen= fits[0].header.get('WAVELEN')
        if wavelen == None:
            wavelen= fits[0].header.get('WAVELNTH')
            if wavelen == None:
                print("!!! wavelen is not valid !!!")
                print("filename :",inname[a])
                wavelen = int(input("please enter wavelen ="))
        naxis1 = fits[0].header.get('NAXIS1')
        naxis2 = fits[0].header.get('NAXIS2')
        wavelist.append(wavelen)
    
        for i in range(0, naxis2):
            for j in range(0, naxis1):
                v = data[i][j]
                if v > 0:
                  if   wavelen == 70 or wavelen == 100 or wavelen == 160:
                      w = ConvUnit(naxis1)
                  elif wavelen == 250:
                      w = 90
                  elif wavelen == 350:
                      w = 51.4
                  elif wavelen == 500:
                      w = 23.6
                  else:
                    print("wavelenがプログラム上で定義されていません。")
                    sys.exit()
                  v = v*w
                  if np.isnan(v) == False: 
                    if v1 < v:
                      v1 = v
                    if v2 > v:
                      v2 = v
                if v <= 0:
                  v = np.nan
                li_v.append(np.log10(v))
        li.append(li_v)
        li_v = []
        a += 1
    
    for m in range(naxis1*naxis2):
        for n in range(b):
            obs_a.append(li[n][m])
        obs.append(obs_a)
        obs_a = []
    
    ### fitting
    y1, temp, bairitu = [],[],[]
    
    for i in range(len(obs)):
      array_y1 = []
      for k in range(len(wavelist)):
          array_y1.append(obs[i][k])
      y1.append(array_y1)
    print("")
    print("Planck関数に近似")
    for n in range(len(y1)):
        print("\r"+"..."+str('{:.2f}'.format(((n+1)/(len(y1)))*100))+"%",end="")
        logWavelist = [np.log10(m) for m in wavelist]
    
    
        a = 0
        nanDel = [logWavelist,y1[n]]
        b = ~np.isnan(nanDel).any(axis=0)
        wavePlot = []
        valPlot = []
        e = 0
        f = 0
        for k in b:
            if k == True:
              wavePlot.append(nanDel[0][e])
              valPlot.append(nanDel[1][e])
              e += 1
            else:
              e += 1
              f += 1
        if f != len(b):
            param_bounds = ((temp_mintoMax[0], bairitu_mintoMax[0]), (temp_mintoMax[1], bairitu_mintoMax[1]))
            syokichi = [temp_initial,bairitu_initial]
            param, cov = curve_fit(planck, wavePlot, valPlot, p0=syokichi,maxfev=100000,bounds=param_bounds)   # p0
            axis_x = np.arange(0, 10, 0.01)
            axis_y = []
            for num in axis_x:
              axis_y.append(planck(num, param[0], param[1]))
    
            figure = plt.figure(figsize=(9,9), facecolor="w")
            plt.xlim(0, 4)
            plt.ylim(np.log10(v2),np.log10(v1)+2)
            plt.tick_params(size=20)
            plt.plot(axis_x, axis_y, "r",label="Temp : "+format(param[0])+" K")
            plt.plot(wavePlot,valPlot,"mo")
            plt.title(obj+" Planck Optimize (No."+str(n+1)+")", fontsize=18, fontname='serif')
            plt.xlabel("log Wavelength [um]", fontname="serif",fontsize=15)
            plt.ylabel("log Intensity [MJy/sr]",fontname="serif",fontsize=15)
            plt.legend(bbox_to_anchor=(0, 1), loc='upper left', borderaxespad=1,fontsize=15)
            plt.savefig(path+"Fit_"+obj+"/PlanckFit_No"+str(n+1)+"_.png", format='png') # save
            plt.close(figure)
            temp.append(param[0])
            bairitu.append(param[1])
        else:
            temp.append(0.000)
            bairitu.append(np.nan)
    
    reTem = reversed(np.reshape(temp,[naxis2,naxis1]))
    df = pd.DataFrame(reTem)
    # print(df)
    df.to_excel(path+'Fit_'+obj+'/planck_'+'Temp_'+obj+'.xlsx', encoding='utf-8')
    
    hdulist = astropy.io.fits.open(repr(inname[0])[1:-1])
    hdu = hdulist[0]
    data = hdu.data
    header1 = hdu.header
    hdu = astropy.io.fits.PrimaryHDU(data=df)
    
    hdu.header = header1
    # 入れたいヘッダ一覧
    
    hdu.header['BITPIX'] = -64
    hdu.header['NAXIS'] = 2
    hdu.header['NAXIS1'] = len(df.columns)
    hdu.header['NAXIS2'] = len(df)
    hdu.header['BUNIT'] = 'K       '
    """
    hdu.header['BPA'] = 0.000000
    hdu.header['BMAJ'] = beamsize/3600
    hdu.header['BMIN'] = beamsize/3600
    hdu.header['EPOCH'] = 2000
    hdu.header['CTYPE1'] = 'RA---GLS'
    hdu.header['CRVAL1'] = 348.43894167
    hdu.header['CDELT1'] = 0.01  # -0.27777784047E-02
    hdu.header['CRPIX1'] = x/2
    hdu.header['CROTA1'] = 0.0
    hdu.header['CUNIT1'] = 'deg     '
    hdu.header['CTYPE2'] = 'DEC--GLS'
    hdu.header['CRVAL2'] = 61.447311111
    hdu.header['CDELT2'] = 0.01  # 0.27777784047E-02
    hdu.header['CRPIX2'] = y/2
    hdu.header['CROTA2'] = 0.0
    hdu.header['CUNIT2'] = 'deg     '
    """
    # 作ったfitsの保存
    hdu.writeto(path+'Fit_'+obj+'/planck_Temp_'+obj+ ".fits", overwrite=True)
    print("完了！！")